import pandas as pd
import joblib

# Load m√¥ h√¨nh v√† scaler
model = joblib.load("models/trained_model.pkl")
scaler = joblib.load("models/scaler.pkl")


def predict_from_input(user_input_dict, threshold=0.3):
    """
    D·ª± ƒëo√°n b·ªánh ti·ªÉu ƒë∆∞·ªùng t·ª´ input dict, cho ph√©p ch·ªânh threshold.
    M·∫∑c ƒë·ªãnh threshold = 0.3 (t·ªëi ∆∞u sau tuning cho d·ªØ li·ªáu l·ªách)
    """

    # T·∫°o DataFrame t·ª´ input
    input_df = pd.DataFrame([user_input_dict])

    # ƒê·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± c·ªôt nh∆∞ khi train
    feature_order = [
        "age",
        "gender",
        "pulse_rate",
        "systolic_bp",
        "diastolic_bp",
        "glucose",
        "height",
        "weight",
        "bmi",
        "family_diabetes",
        "hypertensive",
        "family_hypertension",
        "cardiovascular_disease",
        "stroke",
    ]

    input_df = input_df[feature_order]

    # Chu·∫©n h√≥a d·ªØ li·ªáu
    input_scaled = scaler.transform(input_df)

    # D·ª± ƒëo√°n x√°c su·∫•t
    prob = model.predict_proba(input_scaled)[:, 1]

    # √Åp d·ª•ng threshold t√πy ch·ªânh
    prediction = int(prob[0] >= threshold)

    # Ph√¢n lo·∫°i m·ª©c ƒë·ªô nguy c∆°
    if prob[0] >= threshold + 0.3:
        risk_level = "üî¥ CAO"
    elif prob[0] >= threshold:
        risk_level = "üü† TRUNG B√åNH"
    else:
        risk_level = "üü¢ TH·∫§P"

    """ threshold_info = f"üîµ Threshold ƒëang s·ª≠ d·ª•ng: {threshold}" """
    risk_info = f"üîµ ƒê√°nh gi√° m·ª©c nguy c∆°: {risk_level}"

    # K·∫øt lu·∫≠n ƒë·∫πp h∆°n
    result = (
        f"-> C√≥ nguy c∆° m·∫Øc b·ªánh ti·ªÉu ƒë∆∞·ªùng - {risk_level} (X√°c su·∫•t: {prob[0]*100:.1f}%)."
        if prediction == 1
        else f"-> Kh√¥ng c√≥ d·∫•u hi·ªáu m·∫Øc b·ªánh - {risk_level} (X√°c su·∫•t: {prob[0]*100:.1f}%)."
    )

    # Gh√©p c√°c d√≤ng
    """ result = f"{threshold_info}\n{risk_info}\n{result}" """
    result = f"\n{risk_info}\n{result}"

    return result


# Test s·ª≠ d·ª•ng th·ª≠:
if __name__ == "__main__":
    example_input = {
        "age": 50,  # Tu·ªïi trung ni√™n (nguy c∆° tƒÉng nh·∫π)
        "gender": 1,  # Nam
        "pulse_rate": 76,  # Nh·ªãp tim trung b√¨nh
        "systolic_bp": 130,  # Huy·∫øt √°p t√¢m thu h∆°i cao (ti·ªÅn cao huy·∫øt √°p)
        "diastolic_bp": 85,  # Huy·∫øt √°p t√¢m tr∆∞∆°ng h∆°i cao
        "glucose": 7.2,  # ƒê∆∞·ªùng huy·∫øt h∆°i cao (6.1 - 7.8 mmol/L l√† ti·ªÅn ti·ªÉu ƒë∆∞·ªùng)
        "height": 1.70,  # Chi·ªÅu cao trung b√¨nh
        "weight": 75.0,  # C√¢n n·∫∑ng h∆°i th·ª´a
        "bmi": 25.95,  # BMI h∆°i th·ª´a c√¢n (25 - 29.9)
        "family_diabetes": 0,  # Kh√¥ng c√≥ ti·ªÅn s·ª≠ gia ƒë√¨nh
        "hypertensive": 0,  # Kh√¥ng c√≥ cao huy·∫øt √°p x√°c ƒë·ªãnh
        "family_hypertension": 1,  # Kh√¥ng c√≥ ti·ªÅn s·ª≠ cao huy·∫øt √°p gia ƒë√¨nh
        "cardiovascular_disease": 0,
        "stroke": 0,
    }

    print(predict_from_input(example_input))  # M·∫∑c ƒë·ªãnh threshold 0.3
